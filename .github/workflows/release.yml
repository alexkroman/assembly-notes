name: Build & Release Assembly Notes

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # Generate release notes job
  release-notes:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          CURRENT_TAG=${GITHUB_REF#refs/tags/}

          # Generate release notes from commits
          if [ -n "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s")
          fi

          # Create release notes
          RELEASE_NOTES="## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$CURRENT_TAG"

          # Save to output
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  release:
    needs: release-notes
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
          - os: windows-latest
            platform: win
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install Linux dependencies for robotjs
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxtst-dev libpng-dev libxkbcommon-x11-dev

      - name: Install dependencies
        run: npm ci --no-optional --cache .npm

      - name: Fix Rollup optional dependencies (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Clean npm cache (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue }
          if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json -ErrorAction SilentlyContinue }
          npm install
        shell: powershell

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage

      - name: Build Electron app (macOS)
        if: matrix.os == 'macos-latest'
        run: npm run build:mac:notarized
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          PUBLISH_FOR_PULL_REQUEST: true

      - name: Build Electron app (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm run build:win
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          npm_config_cache: .npm
          PUBLISH_FOR_PULL_REQUEST: true

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 fuse3 libfuse3-3

      - name: Build Electron app (Linux x64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        run: npm run build:linux:x64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Electron app (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: npm run build:linux:arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}${{ matrix.arch && format('-{0}', matrix.arch) || '' }}
          path: |
            release/
            !release/builder-debug.yml
            !release/builder-effective-config.yaml

  # Create GitHub release with all build artifacts
  create-release:
    needs: [release-notes, release]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate update metadata files
        run: |
          # Generate latest-mac.yml for macOS (using ZIP file for autoupdater)
          if [ -f artifacts/release-macos-latest/*.zip ]; then
            ZIP_FILE=$(ls artifacts/release-macos-latest/*.zip | head -1)
            ZIP_SIZE=$(stat -c%s "$ZIP_FILE" 2>/dev/null || stat -f%z "$ZIP_FILE")
            ZIP_NAME=$(basename "$ZIP_FILE")
            cat > artifacts/release-macos-latest/latest-mac.yml << EOF
          version: ${GITHUB_REF#refs/tags/v}
          files:
            - url: $ZIP_NAME
              sha512: $(shasum -a 512 "$ZIP_FILE" | cut -d' ' -f1)
              size: $ZIP_SIZE
          path: $ZIP_NAME
          sha512: $(shasum -a 512 "$ZIP_FILE" | cut -d' ' -f1)
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          EOF
          fi

          # Generate latest.yml for Windows (using ZIP file for autoupdater)
          if [ -f artifacts/release-windows-latest/*.zip ]; then
            ZIP_FILE=$(ls artifacts/release-windows-latest/*.zip | head -1)
            ZIP_SIZE=$(stat -c%s "$ZIP_FILE" 2>/dev/null || stat -f%z "$ZIP_FILE")
            ZIP_NAME=$(basename "$ZIP_FILE")
            cat > artifacts/release-windows-latest/latest.yml << EOF
          version: ${GITHUB_REF#refs/tags/v}
          files:
            - url: $ZIP_NAME
              sha512: $(shasum -a 512 "$ZIP_FILE" | cut -d' ' -f1)
              size: $ZIP_SIZE
          path: $ZIP_NAME
          sha512: $(shasum -a 512 "$ZIP_FILE" | cut -d' ' -f1)
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          EOF
          fi

          # Note: Linux doesn't support auto-updates in the same way as macOS/Windows
          # AppImage files need to be manually replaced by users

      - name: Prepare release files
        id: prepare-files
        run: |
          mkdir -p release-files

          # Copy all release files to a single directory, handling missing files gracefully
          echo "Copying macOS files..."
          cp artifacts/release-macos-latest/*.dmg release-files/ 2>/dev/null || true
          cp artifacts/release-macos-latest/*.zip release-files/ 2>/dev/null || true
          cp artifacts/release-macos-latest/*.blockmap release-files/ 2>/dev/null || true
          cp artifacts/release-macos-latest/latest-mac.yml release-files/ 2>/dev/null || true
          cp artifacts/release-macos-latest/app-update.yml release-files/app-update-mac.yml 2>/dev/null || true

          echo "Copying Windows files..."
          cp artifacts/release-windows-latest/*.exe release-files/ 2>/dev/null || true
          cp artifacts/release-windows-latest/*.zip release-files/ 2>/dev/null || true
          cp artifacts/release-windows-latest/*.blockmap release-files/ 2>/dev/null || true
          cp artifacts/release-windows-latest/latest.yml release-files/ 2>/dev/null || true
          cp artifacts/release-windows-latest/app-update.yml release-files/app-update-win.yml 2>/dev/null || true

          echo "Copying Linux x64 files..."
          cp artifacts/release-ubuntu-latest-x64/*.AppImage release-files/ 2>/dev/null || true
          cp artifacts/release-ubuntu-latest-x64/*.deb release-files/ 2>/dev/null || true

          echo "Copying Linux ARM64 files..."
          cp artifacts/release-ubuntu-latest-arm64/*.AppImage release-files/ 2>/dev/null || true
          cp artifacts/release-ubuntu-latest-arm64/*.deb release-files/ 2>/dev/null || true

          echo "Files to be released:"
          ls -la release-files/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ needs.release-notes.outputs.release-notes }}
          files: release-files/*
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
